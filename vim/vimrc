let VIM_PLUG_HOME = '~/.config/nvim/plugged'

call plug#begin(VIM_PLUG_HOME)

" plugins
" language specific: syntax, or indent or something else
Plug 'Shougo/neco-syntax'
Plug 'google/vim-maktaba' | Plug 'google/vim-codefmt', {'for': ['python', 'go']}
Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }
Plug 'itchyny/vim-haskell-indent', { 'for': 'haskell' }
Plug 'mzlogin/vim-markdown-toc', { 'for': 'markdown' }
Plug 'plasticboy/vim-markdown' | Plug 'godlygeek/tabular', { 'for': 'markdown' }
Plug 'stephpy/vim-yaml', { 'for': 'yaml' }
Plug 'jvirtanen/vim-hcl'
" LSP
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}

" utils
Plug 'airblade/vim-gitgutter'
Plug 'cohama/agit.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } | Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-sneak'
Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'
Plug 'mileszs/ack.vim'
Plug 'othree/eregex.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'

" look and feel
Plug 'itchyny/lightline.vim'
Plug 'kshenoy/vim-signature'
Plug 'luochen1990/rainbow'
Plug 'ntpeters/vim-better-whitespace'
Plug 'sickill/vim-monokai'

call plug#end()

" settings
"syntax
syntax on
syntax enable

" display
set ignorecase
set ruler
set number
set showcmd
set showmode
set cursorline cursorcolumn
set colorcolumn=120
set wrap
set textwidth=0

"display pairs
set showmatch

" clipboard
set clipboard=unnamed

"indent
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set cindent
set shiftround

"Tab
set smarttab

" colorscheme, default to monokai, fallback to desert
try
    colorscheme monokai
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme desert
endtry

" shortcuts
" paste mode
set pastetoggle=<F2>

" toggle number
noremap <F4> :set invnumber<CR>
inoremap <F4> <C-O>:set invnumber<CR>

" vim file explore
nmap <F3> :Explore<CR>

" make mouse only works on command line mode
set mouse=c

" use Ctrl + hjkl to move left, down, up, right
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k

" resize
nnoremap <Up> <C-W>-2
nnoremap <Down> <C-W>+2
nnoremap <Left> <C-W><2
nnoremap <Right> <C-W>>2

" preview substitute
set inccommand=nosplit
tnoremap <Esc> <C-\><C-n>
nnoremap <C-s> <Esc>:vsplit term://bash<CR>A
nnoremap <C-x> <Esc>:split term://bash<CR>A

" persistent
set undodir=~/.cache/vimundo/
set undofile

" Plugin Settings

" Rainbow
let g:rainbow_active = 1

" fzf
nnoremap <C-p> :Files<CR>
nnoremap <leader>a :Ag<CR>
nnoremap <leader>c :Commits<CR>
nnoremap ff :BLines<CR>

" terminal
nnoremap <leader>t :vsplit term://bash<CR>
nnoremap <leader>T :split term://bash<CR>

" vim-sneak
let g:sneak#label = 1

" vim markdown
let g:vim_markdown_folding_disabled = 1

" code format
augroup autoformat_settings
  " autocmd FileType bzl AutoFormatBuffer buildifier
  " autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType go AutoFormatBuffer gofmt
  " autocmd FileType gn AutoFormatBuffer gn
  " autocmd FileType html,css,json AutoFormatBuffer js-beautify
  " autocmd FileType java AutoFormatBuffer google-java-format
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
augroup END

" tagbar
nmap <F8> :TagbarToggle<CR>
" install `gotags` frist
let g:tagbar_type_go = {'ctagstype': 'go',
            \ 'kinds': [
            \ 'p:package','i:imports:1','c:constants','v:variables','t:types','n:interfaces','w:fields',
            \ 'e:embedded','m:methods','r:constructor','f:functions'],
            \ 'sro' : '.',
            \ 'kind2scope' : {'t' : 'ctype','n' : 'ntype'},
            \ 'scope2kind' : {'ctype' : 't','ntype' : 'n'},
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }

" LSP
" ref: https://github.com/neoclide/coc.nvim#example-vim-configuration
"
" for python, run pip install python-language-server first
" for go, run go get -u golang.org/x/tools/cmd/gopls first
"
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>": <SID>check_back_space() ? "\<Tab>": coc#refresh()

" key map
nmap <leader>\ <Plug>(coc-definition)
nmap <leader>r <Plug>(coc-rename)
nmap <leader>p <Plug>(coc-diagnostic-prev)
nmap <leader>n <Plug>(coc-diagnostic-next)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
